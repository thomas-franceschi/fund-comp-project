//Brittany DiGenova
//final_report.txt

//Time Log -Brittany DiGenova 

1 hour SDL Tutorials - 2/26/2016, 2:50-3:50 PM
2 hours SDL Tutorials - 2/27/2016, 1-3 PM
1 hour Team Meeting - 3/3/2016, 9-10 PM
1 hour SDL Tutorials - 3/15/2016, 2:50-3:50 PM
2 hours Team meeting - Attempted to get walking animation working - 3/16/2016, 9-11 PM
3 hours Designing Class Hierarchy for pokemon and potions - 3/17/2016, 8:30-11:30 PM
2 hours Designing and building battle and healing logic -  3/20/2016, 5-7 PM
2 hours Debuggin all of the classes working together and design simple driver - 3/21/2016, 11-1PM
1 hour Team meeting - Discussed desired game features - 4/6/2016, 10:20-11:20 AM
3 hours Debugging Pokemon Classes figuring out pass by reference - 4/12/2016 9-12 PM
1 hour Team meeting - Scaled back ideas to reasonable amount and delegated tasks - 4/13/2016, 10:20-11:20 AM
3 hours Built and added composition for moves class - 4/13/2016 7-10 PM 
2 hours Built algorithms for battling to take away hitpoints, instantiated pokemon - 4/17/2016, 6-8 PM
2 hours Restructuring classes, testing game in lab - 4/18/2016, 2-4 PM
1 hour Team meeting - Worked on combining graphics and game logic, debugged hit detection - 4/20/2016, 10:20-11:20 AM
5 hours Built trainer class and functions, brought together my code with animation - 4/23/2016, 4-9 PM
5 hours Debug battling for trainers and pokemon - 4/25/2016, 2-7 PM
2 hours Writing manual/report/personal report/commenting code - 4/26/2016, 11-1PM
3 hours Team meeting - Combining, finetuning, debugging game before turn in - 4/26/2016, 9-12PM


//Internal Functioning
The first base class, Pokemon, contains all of the attributes that will be shared for all types of Pokemon. This includes hit points, attack,
defense, level and name. The functions in the Pokemon class (which will probably be added upon throughout the design process) include battle 
and heal, as well as a non-default constructor with default fall backs. The battle and heal functions accomplish the key components of the game
that will affect the pokemon's attributes. 

The first function heal combines the Pokemon class hierarchy and the Potion class. Potions have the power to increase a Pokemon's hit points a certain
amount depending on the potion. This value is stored in the 'healing_power' private member of a potion class. The heal function takes a potion as
an input and determines it's healing power by using a get function. The hit points of the called pokemon are then increased by the potion's 'healing_power'.
If the hit_points value is greater than the max (200) it is set back to 200. 

The second function battle contains the logic for the battles that will occur during the pokemon game. Battle is a Pokemon member function and takes a second
Pokemon as an input to account for both of the Pokemon in the fight. Each of the Pokemon begin with a certain number of available moves as well as a set of 
strengths and weaknesses stored in its private data. Each time that a Pokemon calls a move, the power_points for that move decreases (because it can only use a move so
many times). This is accomplished by using a 2D vector. The 2d Vector is 4 by 5 so that there are 4 moves available with max 5 uses each. After the first Pokemon calls a move,
that moves value in the 2D vector decreases by 1. Moves can only be called if the value being called is greater than 1. The battle function uses a while loop that continues
until either the pokemon or it's opponent have hitpoints greater than 0. A *-1 is used to switch wether the pokemon is attacking or defending the opponent every other turn.
This process rotates back and forth until one of the Pokemon faints (runs out of hit points). If the users pokemon has more than 0 hit points after the while loop is broken
then battle returns 1 for a player victory, otherwise the battle function returns 0 for a loss. 
	
	//Computer player moves
	The computer player will randomly choose from it's available moves by only accepting a move if it's pp is > 0 (this will be stored in the second dimension of the moves vector). 
	If a moves value is >0 then some of those moves are still available and it can be used. Once a list of available moves have been made (the first dimensions of the 2D vector, a 
	random generator will be used for the opponent pokemon to pick a move. For the first levels of pokemon strengths and weaknesses will not affect what move the computer player
	chooses. For better opponents, however, strengths and weaknesses will be taken into account in the algorithm for the opponent to choose an attacking move. 
	
	//Accounting for strengths and weaknesses 
	The strengths and weaknesses functions have not been implemented yet because I ran out of time, but I spent time planning them out. In order to build the strengths and weaknesses
	I will attach every movetype to a number (like an index) these numbers of move types will be stored in two seperate 2D vectors. The first being strengths, and the second being 
	weaknesses. The second dimension of each move will be the index number of all the moves that are very effective (for strengths) or very detrimental (for weaknesses). I will then use
	these 2D vectors in the attack and defend functions. Anytime a move is called, it's index number will be checked for the list of numbers that correspond to its strength and weaknesses
	if the users' move's strengths==any of the opponents weaknesses, then the hit_points deducted by the attack will be increased. 


//What I Learned
For this portion of the project I expanded on the previously learned concept of inheritance. I expanded upon what we have already done by building 
a tree structure of various aspects of the Pokemon game. This tree is the basis for all of the gameplay moving forward. I learned how to incorporate many different 
classes into usable functions as well as how to manipulate aspects of one class by calling another. The strengths and weaknesses/battling portion required the most work and 
was probably the hardest part. I had to spend a lot of time thinking about the most efficient way to handle the logic while also trying to make the code highly understandable
in order that the rest of my team can easily build upon it. Seeing as I designed the base logic for the entire game I feel that I made solid use of my time and made a lot
of worthwhile progress for our team to reach our goals. I made considerable headway on our milestones of battle interface and pokemon. 

I started doing SDL tutorials, but after our team meeting we decided that it didn't make sense for everyone on our team to try to develop the map. After delegating tasks
I began spending more of my time developing classes and trying to come up with the most efficient structure for our game. The hardest part of this process was thinking of 
how to develop a large amount of files so that they were all highly reusable able to work well with one another. I have never programmed something with this many files working
in tandem so I learned a lot about planning prior to execution and increased my knowledge of inheritance. All in all I came out with a solid beginning game structure that can
be combined with the SDL map moving effects to build our game.